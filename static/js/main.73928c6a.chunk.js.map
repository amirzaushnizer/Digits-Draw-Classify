{"version":3,"sources":["utils/model-utils.js","utils/image-utils.js","components/action-bar.js","components/grid.js","components/bar.js","components/barchart.js","App.js","index.js"],"names":["getModel","a","tf","makePrediction","model","image","imgTensor","results","predict","Array","from","dataSync","loadImage","url","elem","Promise","resolve","reject","onload","onerror","src","getSmallBWImage","imageDataUrl","canvas","document","createElement","size","width","height","ctx","getContext","imageContainer","Image","drawImage","getImageData","data","filter","element","index","ActionBar","setPredictions","analyzeGridAction","getElementById","bigImage","toDataURL","smallImageBW","pxArray","map","px","predictions","id","Button","className","onClick","clearRect","Grid","useState","isDrawing","setIsDrawing","x","setX","y","setY","startDrawing","e","nativeEvent","offsetX","offsetY","stopDrawing","draw","onMouseMove","x1","y1","x2","y2","beginPath","strokeStyle","lineWidth","lineCap","moveTo","lineTo","stroke","closePath","style","backgroundColor","onTouchStart","onTouchMove","onTouchEnd","onMouseDown","onMouseUp","Bar","digit","chance","ProgressBar","now","min","max","Barchart","Card","App","isLoading","setIsLoading","setModel","useEffect","then","fetchedModel","Spinner","animation","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.73928c6a.chunk.js","sourcesContent":["import * as tf from \"@tensorflow/tfjs\";\n\nexport const getModel = async () => {\n  return await tf.loadLayersModel(\n    \"https://digit-classifier.s3.amazonaws.com/model.json\"\n  );\n};\n\nexport const makePrediction = async (model, image) => {\n  await model;\n  const imgTensor = tf.tensor(image, [1, 784]);\n  const results = model.predict(imgTensor);\n  return Array.from(results.dataSync());\n};\n","async function loadImage(url, elem) {\n  return new Promise((resolve, reject) => {\n    elem.onload = () => resolve(elem);\n    elem.onerror = reject;\n    elem.src = url;\n  });\n}\n\nexport const getSmallBWImage = async (imageDataUrl) => {\n  const canvas = document.createElement(\"canvas\");\n  const size = 28;\n  canvas.width = size;\n  canvas.height = size;\n  const ctx = canvas.getContext(\"2d\");\n  const imageContainer = new Image();\n  await loadImage(imageDataUrl, imageContainer);\n  ctx.drawImage(imageContainer, 0, 0, size, size);\n  return ctx\n    .getImageData(0, 0, canvas.width, canvas.height)\n    .data.filter((element, index) => index % 4 === 0);\n};\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { makePrediction } from \"../utils/model-utils\";\nimport { getSmallBWImage } from \"../utils/image-utils\";\n\nexport const ActionBar = ({ setPredictions, model }) => {\n  const analyzeGridAction = async () => {\n    const canvas = document.getElementById(\"canvas\");\n    const bigImage = canvas.toDataURL();\n    const smallImageBW = await getSmallBWImage(bigImage);\n    const pxArray = Array.from(smallImageBW).map((px) => px / 255);\n    const predictions = await makePrediction(model, pxArray);\n    setPredictions(predictions);\n  };\n\n  const cleanGridAction = () => {\n    const canvas = document.getElementById(\"canvas\");\n    const context = canvas.getContext(\"2d\");\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    setPredictions([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  };\n\n  return (\n    <div id=\"action-bar\">\n      <Button className=\"btn\" onClick={analyzeGridAction}>\n        Analayze Grid\n      </Button>\n      <Button className=\"btn\" onClick={cleanGridAction}>\n        Clean Grid\n      </Button>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useState } from \"react\";\n\nexport const Grid = () => {\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [x, setX] = useState(0);\n  const [y, setY] = useState(0);\n\n  const startDrawing = (e) => {\n    setIsDrawing(true);\n    setX(e.nativeEvent.offsetX);\n    setY(e.nativeEvent.offsetY);\n  };\n\n  const stopDrawing = (e) => {\n    if (isDrawing) {\n      draw(x, y, e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n      setIsDrawing(false);\n      setX(0);\n      setY(0);\n    }\n  };\n\n  const onMouseMove = (e) => {\n    if (isDrawing) {\n      draw(x, y, e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n      setX(e.nativeEvent.offsetX);\n      setY(e.nativeEvent.offsetY);\n    }\n  };\n\n  const draw = (x1, y1, x2, y2) => {\n    const ctx = document.getElementById(\"canvas\").getContext(\"2d\");\n    ctx.beginPath();\n    ctx.strokeStyle = \"white\";\n    ctx.lineWidth = 15;\n    ctx.lineCap = \"round\";\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.closePath();\n  };\n\n  return (\n    <div>\n      <canvas\n        className=\"grid\"\n        id=\"canvas\"\n        width=\"300px\"\n        height=\"300px\"\n        style={{ backgroundColor: \"black\" }}\n        onTouchStart={startDrawing}\n        onTouchMove={onMouseMove}\n        onTouchEnd={stopDrawing}\n        onMouseDown={startDrawing}\n        onMouseUp={stopDrawing}\n        onMouseMove={onMouseMove}\n      ></canvas>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\n\nexport const Bar = ({ digit, chance }) => {\n  return (\n    <div>\n      <div className='digit-label'>{digit}</div>\n      <ProgressBar now={chance * 100} min=\"0\" max=\"100\"></ProgressBar>\n      <br></br>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Bar } from \"./bar\";\nimport { Card } from \"react-bootstrap\";\n\nexport const Barchart = ({ results }) => {\n  return (\n    <Card className=\"res\">\n      {results.map((chance, index) => {\n        return <Bar digit={index} chance={chance} key={`digit bar ${index}`} />;\n      })}\n    </Card>\n  );\n};\n","import \"./App.css\";\nimport { ActionBar } from \"./components/action-bar\";\nimport { Grid } from \"./components/grid\";\nimport { useEffect, useState } from \"react\";\nimport { Barchart } from \"./components/barchart\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { getModel } from \"./utils/model-utils\";\nimport { Spinner } from \"react-bootstrap\";\n\nfunction App() {\n  const [predictions, setPredictions] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [model, setModel] = useState(null);\n\n  useEffect(() => {\n    getModel().then((fetchedModel) => {\n      setModel(fetchedModel);\n      setIsLoading(false);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {isLoading ? (\n        <Spinner animation=\"grow\" />\n      ) : (\n        <div>\n          <Grid />\n          <ActionBar setPredictions={setPredictions} model={model} />\n          {predictions && (\n            <Barchart results={predictions} id=\"predictions\"></Barchart>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}